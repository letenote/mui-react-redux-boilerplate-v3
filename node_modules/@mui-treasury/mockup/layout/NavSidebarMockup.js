"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NavSidebarMockup = exports.InsetList = exports.IconList = void 0;

var _react = _interopRequireDefault(require("react"));

var _Divider = _interopRequireDefault(require("@mui/material/Divider"));

var _List = _interopRequireDefault(require("@mui/material/List"));

var _ListItem = _interopRequireDefault(require("@mui/material/ListItem"));

var _ListItemText = _interopRequireDefault(require("@mui/material/ListItemText"));

var _ListItemIcon = _interopRequireDefault(require("@mui/material/ListItemIcon"));

var _shape = require("../shape");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var IconList = function IconList(_ref) {
  var _ref$count = _ref.count,
      count = _ref$count === void 0 ? 4 : _ref$count;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, _toConsumableArray(Array(count)).map(function (_, index) {
    return /*#__PURE__*/_react["default"].createElement(_ListItem["default"], {
      key: index
    }, /*#__PURE__*/_react["default"].createElement(_ListItemIcon["default"], null, /*#__PURE__*/_react["default"].createElement(_shape.Circle, {
      sx: {
        fontSize: 24
      }
    })), /*#__PURE__*/_react["default"].createElement(_ListItemText["default"], {
      primary: /*#__PURE__*/_react["default"].createElement(_shape.Pill, {
        sx: {
          height: 16,
          width: (0, _utils.randomBetween)(56, 136),
          borderRadius: 1
        }
      })
    }));
  }));
};

exports.IconList = IconList;

var InsetList = function InsetList(_ref2) {
  var _ref2$count = _ref2.count,
      count = _ref2$count === void 0 ? 4 : _ref2$count;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, _toConsumableArray(Array(count)).map(function (_, index) {
    return /*#__PURE__*/_react["default"].createElement(_ListItem["default"], {
      key: index
    }, /*#__PURE__*/_react["default"].createElement(_ListItemText["default"], {
      inset: true,
      primary: /*#__PURE__*/_react["default"].createElement(_shape.Pill, {
        sx: {
          height: 16,
          width: (0, _utils.randomBetween)(56, 136),
          borderRadius: 1
        }
      })
    }));
  }));
};

exports.InsetList = InsetList;

var NavSidebarMockup = function NavSidebarMockup() {
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_List["default"], null, /*#__PURE__*/_react["default"].createElement(IconList, {
    count: 2
  })), /*#__PURE__*/_react["default"].createElement(_Divider["default"], null), /*#__PURE__*/_react["default"].createElement(_List["default"], null, /*#__PURE__*/_react["default"].createElement(IconList, {
    count: 1
  }), /*#__PURE__*/_react["default"].createElement(InsetList, {
    count: 2
  })), /*#__PURE__*/_react["default"].createElement(_Divider["default"], null), /*#__PURE__*/_react["default"].createElement(_List["default"], null, /*#__PURE__*/_react["default"].createElement(IconList, {
    count: 1
  }), /*#__PURE__*/_react["default"].createElement(InsetList, {
    count: 2
  })));
};

exports.NavSidebarMockup = NavSidebarMockup;