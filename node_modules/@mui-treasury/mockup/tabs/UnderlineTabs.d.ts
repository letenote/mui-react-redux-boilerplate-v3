import React from "react";
export declare const UnderlineTabs: import("@mui/system").StyledComponent<{
    action?: React.Ref<import("@mui/material/Tabs").TabsActions> | undefined;
    allowScrollButtonsMobile?: boolean | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    centered?: boolean | undefined;
    children?: React.ReactNode;
    classes?: Partial<import("@mui/material/Tabs").TabsClasses> | undefined;
    indicatorColor?: "primary" | "secondary" | undefined;
    onChange?: ((event: React.SyntheticEvent<Element, Event>, value: any) => void) | undefined;
    orientation?: "horizontal" | "vertical" | undefined;
    ScrollButtonComponent?: React.ElementType<any> | undefined;
    scrollButtons?: boolean | "auto" | undefined;
    selectionFollowsFocus?: boolean | undefined;
    TabIndicatorProps?: Partial<React.HTMLAttributes<HTMLDivElement>> | undefined;
    TabScrollButtonProps?: Partial<import("@mui/material").TabScrollButtonProps> | undefined;
    textColor?: "inherit" | "primary" | "secondary" | undefined;
    value?: any;
    variant?: "standard" | "fullWidth" | "scrollable" | undefined;
    visibleScrollbar?: boolean | undefined;
    sx?: import("@mui/system").SxProps<import("@mui/material/styles").Theme> | undefined;
} & import("@mui/material/OverridableComponent").CommonProps & Omit<{
    action?: React.Ref<import("@mui/material").ButtonBaseActions> | undefined;
    centerRipple?: boolean | undefined;
    children?: React.ReactNode;
    classes?: Partial<import("@mui/material").ButtonBaseClasses> | undefined;
    disabled?: boolean | undefined;
    disableRipple?: boolean | undefined;
    disableTouchRipple?: boolean | undefined;
    focusRipple?: boolean | undefined;
    focusVisibleClassName?: string | undefined;
    LinkComponent?: React.ElementType<any> | undefined;
    onFocusVisible?: React.FocusEventHandler<any> | undefined;
    sx?: import("@mui/system").SxProps<import("@mui/material/styles").Theme> | undefined;
    tabIndex?: number | undefined;
    TouchRippleProps?: Partial<import("@mui/material/ButtonBase/TouchRipple").TouchRippleProps> | undefined;
} & Omit<{
    action?: React.Ref<import("@mui/material").ButtonBaseActions> | undefined;
    centerRipple?: boolean | undefined;
    children?: React.ReactNode;
    classes?: Partial<import("@mui/material").ButtonBaseClasses> | undefined;
    disabled?: boolean | undefined;
    disableRipple?: boolean | undefined;
    disableTouchRipple?: boolean | undefined;
    focusRipple?: boolean | undefined;
    focusVisibleClassName?: string | undefined;
    LinkComponent?: React.ElementType<any> | undefined;
    onFocusVisible?: React.FocusEventHandler<any> | undefined;
    sx?: import("@mui/system").SxProps<import("@mui/material/styles").Theme> | undefined;
    tabIndex?: number | undefined;
    TouchRippleProps?: Partial<import("@mui/material/ButtonBase/TouchRipple").TouchRippleProps> | undefined;
}, "classes"> & import("@mui/material/OverridableComponent").CommonProps & Omit<Pick<React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "key" | keyof React.ButtonHTMLAttributes<HTMLButtonElement>> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | React.RefObject<HTMLButtonElement> | null | undefined;
}, "disabled" | "children" | "sx" | "action" | keyof import("@mui/material/OverridableComponent").CommonProps | "tabIndex" | "onFocusVisible" | "centerRipple" | "disableRipple" | "disableTouchRipple" | "focusRipple" | "focusVisibleClassName" | "LinkComponent" | "TouchRippleProps">, "orientation" | "children" | "sx" | "action" | keyof import("@mui/material/OverridableComponent").CommonProps | "aria-label" | "aria-labelledby" | "onChange" | "variant" | "value" | "allowScrollButtonsMobile" | "centered" | "indicatorColor" | "ScrollButtonComponent" | "scrollButtons" | "selectionFollowsFocus" | "TabIndicatorProps" | "TabScrollButtonProps" | "textColor" | "visibleScrollbar"> & {
    theme?: import("@mui/material/styles").Theme | undefined;
    as?: React.ElementType<any> | undefined;
    sx?: import("@mui/system").SxProps<import("@mui/material/styles").Theme> | undefined;
}, {}, {}>;
