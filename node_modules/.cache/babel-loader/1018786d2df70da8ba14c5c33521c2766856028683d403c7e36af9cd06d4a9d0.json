{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from \"react\";\nimport { EdgeSidebarBuilder } from \"../EdgeSidebar/EdgeSidebarBuilder\";\nimport { HeaderBuilder } from \"../Header/HeaderBuilder\";\nimport { InsetSidebarBuilder } from \"../InsetSidebar/InsetSidebarBuilder\";\nimport { LEFT_EDGE_SIDEBAR_ID, RIGHT_EDGE_SIDEBAR_ID } from \"../utils/constant\";\nvar LayoutContext = /*#__PURE__*/React.createContext(undefined);\nLayoutContext.displayName = \"LayoutContext\";\nexport var useLayoutCtx = () => {\n  var ctx = React.useContext(LayoutContext);\n  if (!ctx) {\n    throw new Error(\"useLayoutCtx must be rendered under LayoutProvider\");\n  }\n  return ctx;\n};\nexport var LayoutConsumer = LayoutContext.Consumer;\nvar INITIAL_EDGE_SIDEBAR_STATE = {\n  open: false,\n  collapsed: false\n};\nvar setUpEdgeSidebar = builder => {\n  var autoGenInitialState = {\n    leftEdgeSidebar: {},\n    rightEdgeSidebar: {}\n  };\n  if (builder.leftEdgeSidebar) {\n    builder.leftEdgeSidebar.id = LEFT_EDGE_SIDEBAR_ID;\n    autoGenInitialState.leftEdgeSidebar = INITIAL_EDGE_SIDEBAR_STATE;\n  }\n  if (builder.rightEdgeSidebar) {\n    builder.rightEdgeSidebar.id = RIGHT_EDGE_SIDEBAR_ID;\n    autoGenInitialState.rightEdgeSidebar = INITIAL_EDGE_SIDEBAR_STATE;\n  }\n  return autoGenInitialState;\n};\nvar injectStateToEdgeSidebar = (builder, state) => {\n  if (builder.leftEdgeSidebar) {\n    var _state$leftEdgeSideba;\n    builder.leftEdgeSidebar.setState((_state$leftEdgeSideba = state.leftEdgeSidebar) !== null && _state$leftEdgeSideba !== void 0 ? _state$leftEdgeSideba : {});\n  }\n  if (builder.rightEdgeSidebar) {\n    var _state$rightEdgeSideb;\n    builder.rightEdgeSidebar.setState((_state$rightEdgeSideb = state.rightEdgeSidebar) !== null && _state$rightEdgeSideb !== void 0 ? _state$rightEdgeSideb : {});\n  }\n};\nexport var Root = _ref => {\n  var {\n    initialState: controlledInitialState,\n    scheme,\n    children\n  } = _ref;\n  if (!scheme) {\n    throw new Error(\"Missing scheme! fixed by passing `scheme` to <Root scheme={scheme} />\");\n  }\n  var builder = {};\n  if (scheme.header) builder.header = new HeaderBuilder(scheme.header);\n  if (scheme.topHeader) builder.topHeader = new HeaderBuilder(scheme.topHeader);\n  if (scheme.subheader) builder.subheader = new HeaderBuilder(scheme.subheader);\n  if (scheme.leftEdgeSidebar) builder.leftEdgeSidebar = new EdgeSidebarBuilder(scheme.leftEdgeSidebar);\n  if (scheme.rightEdgeSidebar) builder.rightEdgeSidebar = new EdgeSidebarBuilder(scheme.rightEdgeSidebar);\n  if (scheme.rightInsetSidebar) builder.rightInsetSidebar = new InsetSidebarBuilder(scheme.rightInsetSidebar);\n  if (scheme.leftInsetSidebar) builder.leftInsetSidebar = new InsetSidebarBuilder(scheme.leftInsetSidebar);\n  var autoGenInitialState = setUpEdgeSidebar(builder);\n  var [leftState, setLeftState] = React.useState(_objectSpread(_objectSpread({}, autoGenInitialState.leftEdgeSidebar), controlledInitialState === null || controlledInitialState === void 0 ? void 0 : controlledInitialState.leftEdgeSidebar));\n  var [rightState, setRightState] = React.useState(_objectSpread(_objectSpread({}, autoGenInitialState.rightEdgeSidebar), controlledInitialState === null || controlledInitialState === void 0 ? void 0 : controlledInitialState.rightEdgeSidebar));\n  var setOpen = (id, value) => {\n    function setter(state) {\n      return state.open === value ? state : _objectSpread(_objectSpread({}, state), {}, {\n        open: value\n      });\n    }\n    if (id === LEFT_EDGE_SIDEBAR_ID) {\n      setLeftState(setter);\n    }\n    if (id === RIGHT_EDGE_SIDEBAR_ID) {\n      setRightState(setter);\n    }\n  };\n  var setCollapsed = (id, value) => {\n    function setter(state) {\n      return state.collapsed === value ? state : _objectSpread(_objectSpread({}, state), {}, {\n        collapsed: value\n      });\n    }\n    if (id === LEFT_EDGE_SIDEBAR_ID) {\n      setLeftState(setter);\n    }\n    if (id === RIGHT_EDGE_SIDEBAR_ID) {\n      setRightState(setter);\n    }\n  };\n  var toggleLeftSidebarOpen = () => setLeftState(state => _objectSpread(_objectSpread({}, state), {}, {\n    open: !state.open\n  }));\n  var toggleLeftSidebarCollapsed = () => setLeftState(state => _objectSpread(_objectSpread({}, state), {}, {\n    collapsed: !state.collapsed\n  }));\n  var toggleRightSidebarOpen = () => setRightState(state => _objectSpread(_objectSpread({}, state), {}, {\n    open: !state.open\n  }));\n  var toggleRightSidebarCollapsed = () => setRightState(state => _objectSpread(_objectSpread({}, state), {}, {\n    collapsed: !state.collapsed\n  }));\n  injectStateToEdgeSidebar(builder, {\n    leftEdgeSidebar: leftState,\n    rightEdgeSidebar: rightState\n  }); // assign Effect\n\n  if (builder.header) {\n    builder.header.effectedBy = {\n      leftEdgeSidebar: builder.leftEdgeSidebar,\n      rightEdgeSidebar: builder.rightEdgeSidebar\n    };\n  }\n  if (builder.topHeader) {\n    builder.topHeader.effectedBy = {\n      leftEdgeSidebar: builder.leftEdgeSidebar,\n      rightEdgeSidebar: builder.rightEdgeSidebar\n    };\n  }\n  if (builder.subheader) {\n    builder.subheader.effectedBy = {\n      leftEdgeSidebar: builder.leftEdgeSidebar,\n      rightEdgeSidebar: builder.rightEdgeSidebar\n    };\n  }\n  if (builder.leftInsetSidebar) {\n    builder.leftInsetSidebar.anchor = \"left\";\n    builder.leftInsetSidebar.effectedBy = {\n      header: builder.header\n    };\n  }\n  if (builder.rightInsetSidebar) {\n    builder.rightInsetSidebar.anchor = \"right\";\n    builder.rightInsetSidebar.effectedBy = {\n      header: builder.header\n    };\n  }\n  var ctx = {\n    state: {\n      leftEdgeSidebar: leftState,\n      rightEdgeSidebar: rightState\n    },\n    builder,\n    setOpen,\n    setCollapsed,\n    toggleLeftSidebarOpen,\n    toggleLeftSidebarCollapsed,\n    toggleRightSidebarOpen,\n    toggleRightSidebarCollapsed\n  };\n  return /*#__PURE__*/React.createElement(LayoutContext.Provider, {\n    value: ctx\n  }, typeof children === \"function\" ? children(ctx) : children);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}