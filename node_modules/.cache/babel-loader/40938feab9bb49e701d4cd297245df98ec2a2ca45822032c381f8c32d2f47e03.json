{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from \"react\";\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport { useLayoutCtx } from \"../Root/Root\";\nimport { useScreen } from \"../hooks/useScreen\";\nimport { EdgeSidebarBuilder } from \"./EdgeSidebarBuilder\";\nimport { pickNearestBreakpoint } from \"../utils/pickNearestBreakpoint\";\nimport { useScrollY } from \"../hooks/useScrollY\";\nimport { HeadersCompiler } from \"../MultiHeaders/HeadersCompiler\";\nimport { getEdgeOffsetSxProps } from \"./getEdgeOffsetSxProps\";\nvar OffsetRoot = styled(\"div\", {\n  name: \"EdgeSidebarOffset\",\n  slot: \"Root\"\n})({});\nexport var EdgeOffset = function EdgeOffset(_ref) {\n  var sidebarId = _ref.sidebarId;\n  var _useLayoutCtx = useLayoutCtx(),\n    builder = _useLayoutCtx.builder;\n  var theme = useTheme();\n  var screen = useScreen();\n  var edgeSidebar = builder[sidebarId];\n  var sidebarConfig = pickNearestBreakpoint(edgeSidebar === null || edgeSidebar === void 0 ? void 0 : edgeSidebar.config, screen);\n  var headerMagnetEnabled = (EdgeSidebarBuilder.isPermanentConfig(sidebarConfig) || EdgeSidebarBuilder.isPersistentConfig(sidebarConfig)) && (sidebarConfig === null || sidebarConfig === void 0 ? void 0 : sidebarConfig.headerMagnetEnabled); // dont't calculate scrollY if not magnet for performance\n\n  var scrollY = useScrollY(!headerMagnetEnabled);\n  var _HeadersCompiler$getC = HeadersCompiler([builder.header, builder.topHeader, builder.subheader]).getClippedHeight(sidebarId),\n    totalHeight = _HeadersCompiler$getC.totalHeight,\n    diffHeight = _HeadersCompiler$getC.diffHeight; // header magnet geature\n\n  var style = {};\n  if (headerMagnetEnabled) {\n    var maxOffset = diffHeight && screen ? pickNearestBreakpoint(diffHeight, screen) : 0;\n    style.marginTop = \"max(-\".concat(scrollY !== null && scrollY !== void 0 ? scrollY : 0, \"px, calc(-1 * \").concat(maxOffset, \"))\");\n  } // header offset\n\n  var sxProps = getEdgeOffsetSxProps(edgeSidebar, totalHeight);\n  return /*#__PURE__*/React.createElement(OffsetRoot, {\n    className: \"EdgeHeaderOffset\",\n    sx: _objectSpread(_objectSpread({}, sxProps), {}, {\n      transition: theme.transitions.create([\"all\"], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.short\n      })\n    }),\n    style: style\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}