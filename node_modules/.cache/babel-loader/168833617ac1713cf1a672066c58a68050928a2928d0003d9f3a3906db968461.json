{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nimport { useScreen } from \"./useScreen\";\nimport { useLayoutCtx } from \"../Root/Root\";\nimport { BREAKPOINT_KEYS } from \"../utils/muiBreakpoints\";\nexport var useSidebarAutoCollapse = function useSidebarAutoCollapse(sidebarId) {\n  var _builder$sidebarId;\n  var _useLayoutCtx = useLayoutCtx(),\n    builder = _useLayoutCtx.builder,\n    setCollapsed = _useLayoutCtx.setCollapsed;\n  var screen = useScreen();\n  var prevScreen = useRef(screen);\n  var collapsedBp = sidebarId ? (_builder$sidebarId = builder[sidebarId]) === null || _builder$sidebarId === void 0 ? void 0 : _builder$sidebarId.autoCollapse : undefined;\n  useEffect(function () {\n    if (sidebarId && collapsedBp && screen && prevScreen.current) {\n      if (screen === prevScreen.current && BREAKPOINT_KEYS.indexOf(screen) <= BREAKPOINT_KEYS.indexOf(collapsedBp)) {\n        // first mount on browser\n        setCollapsed(sidebarId, true);\n      } // when viewport changes\n\n      if (screen !== prevScreen.current) {\n        if (BREAKPOINT_KEYS.indexOf(prevScreen.current) <= BREAKPOINT_KEYS.indexOf(collapsedBp) && BREAKPOINT_KEYS.indexOf(collapsedBp) < BREAKPOINT_KEYS.indexOf(screen)) {\n          setCollapsed(sidebarId, false);\n        }\n        if (BREAKPOINT_KEYS.indexOf(prevScreen.current) > BREAKPOINT_KEYS.indexOf(collapsedBp) && BREAKPOINT_KEYS.indexOf(collapsedBp) >= BREAKPOINT_KEYS.indexOf(screen)) {\n          setCollapsed(sidebarId, true);\n        }\n        prevScreen.current = screen;\n      }\n    }\n  }, [screen]);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}