{"ast":null,"code":"import { BREAKPOINT_KEYS } from \"./muiBreakpoints\";\n\n/**\n *\n *\n * @param getValue the value the result object (undefined will be remove from result)\n * @param options\n *  - breakpoints: list of Breakpoints to be iterate\n *  - initialValue: if provided, will be used to compare if the value from getValue should be added or not\n * @returns object that can be passed to <MuiComponent sx={...} />\n */\nexport var createSxResult = (getValue, options) => {\n  var {\n    breakpoints = BREAKPOINT_KEYS,\n    initialValue\n  } = options !== null && options !== void 0 ? options : {};\n  var result = {};\n  var lastValue = undefined;\n  for (var _bp of breakpoints) {\n    var value = getValue(_bp, lastValue);\n    if (value !== undefined) {\n      // only assign value if not undefined\n      if (lastValue === undefined) {\n        // 1st valid value\n        result[_bp] = value;\n        lastValue = value;\n        if (initialValue !== undefined && initialValue === value) {\n          // if same as initial, deleted from object\n          delete result[_bp];\n        }\n      } else {\n        if (lastValue !== value) {\n          // next valid value that is not the same as lastValue and so on\n          result[_bp] = value;\n          lastValue = value;\n        }\n      }\n    }\n  }\n  return result;\n};","map":{"version":3,"names":["BREAKPOINT_KEYS","createSxResult","getValue","options","breakpoints","initialValue","result","lastValue","undefined","_bp","value"],"sources":["/Users/rezaaditya/Documents/github/mui-app-v3/node_modules/@mui-treasury/layout/esm/utils/createSxResult.js"],"sourcesContent":["import { BREAKPOINT_KEYS } from \"./muiBreakpoints\";\n\n/**\n *\n *\n * @param getValue the value the result object (undefined will be remove from result)\n * @param options\n *  - breakpoints: list of Breakpoints to be iterate\n *  - initialValue: if provided, will be used to compare if the value from getValue should be added or not\n * @returns object that can be passed to <MuiComponent sx={...} />\n */\nexport var createSxResult = (getValue, options) => {\n  var {\n    breakpoints = BREAKPOINT_KEYS,\n    initialValue\n  } = options !== null && options !== void 0 ? options : {};\n  var result = {};\n  var lastValue = undefined;\n\n  for (var _bp of breakpoints) {\n    var value = getValue(_bp, lastValue);\n\n    if (value !== undefined) {\n      // only assign value if not undefined\n      if (lastValue === undefined) {\n        // 1st valid value\n        result[_bp] = value;\n        lastValue = value;\n\n        if (initialValue !== undefined && initialValue === value) {\n          // if same as initial, deleted from object\n          delete result[_bp];\n        }\n      } else {\n        if (lastValue !== value) {\n          // next valid value that is not the same as lastValue and so on\n          result[_bp] = value;\n          lastValue = value;\n        }\n      }\n    }\n  }\n\n  return result;\n};"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kBAAkB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,cAAc,GAAG,CAACC,QAAQ,EAAEC,OAAO,KAAK;EACjD,IAAI;IACFC,WAAW,GAAGJ,eAAe;IAC7BK;EACF,CAAC,GAAGF,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAGA,OAAO,GAAG,CAAC,CAAC;EACzD,IAAIG,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,SAAS,GAAGC,SAAS;EAEzB,KAAK,IAAIC,GAAG,IAAIL,WAAW,EAAE;IAC3B,IAAIM,KAAK,GAAGR,QAAQ,CAACO,GAAG,EAAEF,SAAS,CAAC;IAEpC,IAAIG,KAAK,KAAKF,SAAS,EAAE;MACvB;MACA,IAAID,SAAS,KAAKC,SAAS,EAAE;QAC3B;QACAF,MAAM,CAACG,GAAG,CAAC,GAAGC,KAAK;QACnBH,SAAS,GAAGG,KAAK;QAEjB,IAAIL,YAAY,KAAKG,SAAS,IAAIH,YAAY,KAAKK,KAAK,EAAE;UACxD;UACA,OAAOJ,MAAM,CAACG,GAAG,CAAC;QACpB;MACF,CAAC,MAAM;QACL,IAAIF,SAAS,KAAKG,KAAK,EAAE;UACvB;UACAJ,MAAM,CAACG,GAAG,CAAC,GAAGC,KAAK;UACnBH,SAAS,GAAGG,KAAK;QACnB;MACF;IACF;EACF;EAEA,OAAOJ,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}