{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { ResponsiveBuilder } from \"../shared/ResponsiveBuilder\";\nimport { combineBreakpoints } from \"../utils/combineBreakpoints\";\nimport { DEFAULT_THEME } from \"../utils/constant\";\nimport { pickNearestBreakpoint } from \"../utils/pickNearestBreakpoint\";\nexport class EdgeSidebarBuilder extends ResponsiveBuilder {\n  constructor(params) {\n    super(params);\n    _defineProperty(this, \"effectedBy\", {});\n    _defineProperty(this, \"getFinalWidth\", config => {\n      var _this$state, _config$collapsedWidt;\n      return config !== null && config !== void 0 && config.collapsible && (_this$state = this.state) !== null && _this$state !== void 0 && _this$state.collapsed ? (_config$collapsedWidt = config.collapsedWidth) !== null && _config$collapsedWidt !== void 0 ? _config$collapsedWidt : config.width : config === null || config === void 0 ? void 0 : config.width;\n    });\n    this.autoCollapse = params.autoCollapse;\n  }\n  setState(state) {\n    this.state = state;\n  }\n  isFlexiblePersistent(breakpoint, id) {\n    var config = pickNearestBreakpoint(this.config, breakpoint);\n    return EdgeSidebarBuilder.isFlexiblePersistentConfig(config, id);\n  }\n  getOccupiedSpace(id) {\n    return this.generateSxWithHidden({\n      hiddenValue: 0,\n      assignValue: (breakpointConfig, _, lastResultVal) => {\n        if (EdgeSidebarBuilder.isTemporaryConfig(breakpointConfig)) {\n          if (lastResultVal !== undefined) {\n            return 0;\n          }\n          return undefined; // do nothing for xs because temporary variant will be modal\n        }\n\n        if (EdgeSidebarBuilder.isPersistentConfig(breakpointConfig)) {\n          var _this$state2;\n          if ((_this$state2 = this.state) !== null && _this$state2 !== void 0 && _this$state2.open && !EdgeSidebarBuilder.isNonePersistentConfig(breakpointConfig, id)) {\n            return this.getFinalWidth(breakpointConfig);\n          } else {\n            return 0;\n          }\n        }\n        if (EdgeSidebarBuilder.isPermanentConfig(breakpointConfig)) {\n          return this.getFinalWidth(breakpointConfig);\n        }\n      }\n    });\n  }\n  getZIndex() {\n    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_THEME;\n    var result = {};\n    if (!this.effectedBy.header) return {};\n    var breakpoints = combineBreakpoints(this.effectedBy.header.config, this.config);\n    for (var key of breakpoints) {\n      var bp = key;\n      if (this.id) {\n        var isClipped = this.effectedBy.header.isClipped(this.id, bp);\n        var isAboveSomeEdgeSidebar = this.effectedBy.header.isAboveSomeEdgeSidebar(bp);\n        result[bp] = theme.zIndex.drawer + (isAboveSomeEdgeSidebar && !isClipped ? 20 : 0);\n      } else {\n        console.warn(\"Cannot find EdgeSidebar id. This might be an internal bug, please open an issue in github.\");\n      }\n    }\n    return result;\n  }\n  getWidth() {\n    return this.generateSx((breakpointConfig, bp) => {\n      var _this$config$bp;\n      return EdgeSidebarBuilder.isTemporaryConfig(breakpointConfig) ? (_this$config$bp = this.config[bp]) === null || _this$config$bp === void 0 ? void 0 : _this$config$bp.width : this.getFinalWidth(breakpointConfig);\n    });\n  }\n  getDrawerVariant() {\n    return this.generateSx(config => config.variant);\n  }\n  getSxProps() {\n    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_THEME;\n    var sxDisplay = this.getSxDisplay(\"flex\");\n    var displayKeys = Object.keys(sxDisplay);\n    var shouldAttachDisplay = displayKeys.length > 1 || displayKeys.length === 1 && displayKeys[0] !== \"xs\";\n    return _objectSpread({\n      width: this.getWidth(),\n      zIndex: this.getZIndex(theme)\n    }, shouldAttachDisplay && {\n      display: sxDisplay\n    });\n  }\n  getEdgeTriggerSxDisplay(options) {\n    var {\n      field,\n      display = \"inline-flex\"\n    } = options;\n    return this.generateSxWithHidden({\n      strict: true,\n      hiddenValue: \"none\",\n      assignValue: config => {\n        if (field === \"open\") {\n          if (EdgeSidebarBuilder.isPermanentConfig(config)) {\n            return \"none\";\n          } else {\n            return display;\n          }\n        }\n        if (field === \"collapsed\") {\n          if (EdgeSidebarBuilder.isCollapsibleConfig(config)) {\n            return display;\n          } else {\n            return \"none\";\n          }\n        }\n      }\n    });\n  }\n}\n_defineProperty(EdgeSidebarBuilder, \"isPersistentConfig\", config => {\n  return (config === null || config === void 0 ? void 0 : config.variant) === \"persistent\";\n});\n_defineProperty(EdgeSidebarBuilder, \"isNonePersistentConfig\", (config, id) => {\n  return !!config && !!EdgeSidebarBuilder.isPersistentConfig(config) && (typeof config.persistentBehavior === \"string\" && config.persistentBehavior === \"none\" || typeof config.persistentBehavior === \"object\" && !!id && config.persistentBehavior[id] === \"none\");\n});\n_defineProperty(EdgeSidebarBuilder, \"isFlexiblePersistentConfig\", (config, id) => {\n  return !!config && !!EdgeSidebarBuilder.isPersistentConfig(config) && (typeof config.persistentBehavior === \"string\" && config.persistentBehavior === \"flexible\" || typeof config.persistentBehavior === \"object\" && !!id && config.persistentBehavior[id] === \"flexible\");\n});\n_defineProperty(EdgeSidebarBuilder, \"isCollapsibleConfig\", config => {\n  return (EdgeSidebarBuilder.isPermanentConfig(config) || EdgeSidebarBuilder.isPersistentConfig(config)) && !!(config !== null && config !== void 0 && config.collapsible);\n});\n_defineProperty(EdgeSidebarBuilder, \"isPermanentConfig\", config => {\n  return (config === null || config === void 0 ? void 0 : config.variant) === \"permanent\";\n});\n_defineProperty(EdgeSidebarBuilder, \"isTemporaryConfig\", config => {\n  return (config === null || config === void 0 ? void 0 : config.variant) === \"temporary\";\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}