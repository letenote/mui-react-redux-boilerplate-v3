{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { subtractCalc } from \"../utils/calc\";\nimport { pickNearestBreakpoint } from \"../utils/pickNearestBreakpoint\";\nimport { ResponsiveBuilder } from \"../shared/ResponsiveBuilder\";\nimport { flattenLoose, flattenStrict } from \"../utils/flattenResponsive\";\nimport { toValidCssValue } from \"../utils/toValidCssValue\";\nexport class InsetSidebarBuilder extends ResponsiveBuilder {\n  constructor(params) {\n    super(params);\n    _defineProperty(this, \"effectedBy\", {});\n  }\n  getFixedArea() {\n    var modifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return flattenLoose(this.generateSx((config, bp) => config.position === \"fixed\" ? \"\".concat(modifier * 9999, \"px\") : bp === \"xs\" ? undefined : \"initial\"));\n  }\n  getSxBody() {\n    var anchor = this.anchor;\n    var height = {};\n    var {\n      header\n    } = this.effectedBy;\n    if (header) {\n      var {\n        height: responsiveHeight\n      } = header.getSxHeight();\n      var breakpoints = this.mergeBreakpoints(responsiveHeight !== null && responsiveHeight !== void 0 ? responsiveHeight : []);\n      for (var bp of breakpoints) {\n        var insetConfig = pickNearestBreakpoint(this.config, bp);\n        if ((insetConfig === null || insetConfig === void 0 ? void 0 : insetConfig.position) === \"absolute\") {\n          var headerHeight = pickNearestBreakpoint(responsiveHeight, bp);\n          height[bp] = headerHeight === 0 || headerHeight === \"0px\" ? \"100vh\" : subtractCalc(\"100vh\", headerHeight);\n        }\n        if ((insetConfig === null || insetConfig === void 0 ? void 0 : insetConfig.position) === \"fixed\") height[bp] = \"100%\";\n        if ((insetConfig === null || insetConfig === void 0 ? void 0 : insetConfig.position) === \"sticky\") height[bp] = \"initial\";\n      }\n    }\n    return _objectSpread(_objectSpread({\n      height: flattenLoose(height),\n      width: flattenLoose(this.generateSx(config => config.position === \"fixed\" ? \"initial\" : \"100%\")),\n      position: flattenLoose(this.generateSx(config => config.position)),\n      top: flattenLoose(this.generateSx(config => {\n        var _config$top;\n        return (_config$top = config.top) !== null && _config$top !== void 0 ? _config$top : 0;\n      }))\n    }, anchor === \"left\" && {\n      marginLeft: this.getFixedArea(-1),\n      paddingLeft: this.getFixedArea()\n    }), anchor === \"right\" && {\n      marginRight: this.getFixedArea(-1),\n      paddingRight: this.getFixedArea()\n    });\n  }\n  getSxRoot() {\n    return {\n      display: flattenStrict(this.getSxDisplay(\"block\")),\n      width: flattenLoose(this.generateSx(config => toValidCssValue(config.width)))\n    };\n  }\n  getOccupiedSpace() {\n    return flattenStrict(this.generateSxWithHidden({\n      assignValue: config => toValidCssValue(config.width),\n      hiddenValue: \"0px\",\n      strict: true\n    }));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}