{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rezaaditya/Documents/github/mui-react-redux-boilerplate-v3/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rezaaditya/Documents/github/mui-react-redux-boilerplate-v3/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"/Users/rezaaditya/Documents/github/mui-react-redux-boilerplate-v3/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n  var strippedURL = new URL(fullURL);\n  var _iterator = _createForOfIteratorHelper(ignoreParams),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var param = _step.value;\n      strippedURL.searchParams.delete(param);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nfunction cacheMatchIgnoreParams(_x, _x2, _x3, _x4) {\n  return _cacheMatchIgnoreParams.apply(this, arguments);\n}\nfunction _cacheMatchIgnoreParams() {\n  _cacheMatchIgnoreParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(cache, request, ignoreParams, matchOptions) {\n    var strippedRequestURL, keysOptions, cacheKeys, _iterator2, _step2, cacheKey, strippedCacheKeyURL;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          strippedRequestURL = stripParams(request.url, ignoreParams); // If the request doesn't include any ignored params, match as normal.\n          if (!(request.url === strippedRequestURL)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", cache.match(request, matchOptions));\n        case 3:\n          // Otherwise, match by comparing keys\n          keysOptions = Object.assign(Object.assign({}, matchOptions), {\n            ignoreSearch: true\n          });\n          _context.next = 6;\n          return cache.keys(request, keysOptions);\n        case 6:\n          cacheKeys = _context.sent;\n          _iterator2 = _createForOfIteratorHelper(cacheKeys);\n          _context.prev = 8;\n          _iterator2.s();\n        case 10:\n          if ((_step2 = _iterator2.n()).done) {\n            _context.next = 17;\n            break;\n          }\n          cacheKey = _step2.value;\n          strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n          if (!(strippedRequestURL === strippedCacheKeyURL)) {\n            _context.next = 15;\n            break;\n          }\n          return _context.abrupt(\"return\", cache.match(cacheKey, matchOptions));\n        case 15:\n          _context.next = 10;\n          break;\n        case 17:\n          _context.next = 22;\n          break;\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](8);\n          _iterator2.e(_context.t0);\n        case 22:\n          _context.prev = 22;\n          _iterator2.f();\n          return _context.finish(22);\n        case 25:\n          return _context.abrupt(\"return\");\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[8, 19, 22, 25]]);\n  }));\n  return _cacheMatchIgnoreParams.apply(this, arguments);\n}\nexport { cacheMatchIgnoreParams };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}