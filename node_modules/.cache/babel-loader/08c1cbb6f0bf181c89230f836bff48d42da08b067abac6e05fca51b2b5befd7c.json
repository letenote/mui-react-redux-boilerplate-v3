{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport { useLayoutCtx } from \"../Root/Root\";\nvar InsetAvoidingViewRoot = styled(\"div\", {\n  name: \"InsetAvoidingView\",\n  slot: \"Root\"\n})({\n  transition: \"all 225ms\"\n});\nexport var InsetAvoidingView = props => {\n  var {\n    builder\n  } = useLayoutCtx();\n  var sxProps = {\n    marginLeft: \"\",\n    marginRight: \"\"\n  };\n  if (builder.leftInsetSidebar) {\n    sxProps.marginLeft = builder.leftInsetSidebar.getOccupiedSpace();\n  }\n  if (builder.rightInsetSidebar) {\n    sxProps.marginRight = builder.rightInsetSidebar.getOccupiedSpace();\n  }\n  return /*#__PURE__*/React.createElement(InsetAvoidingViewRoot, _extends({}, props, {\n    sx: _objectSpread(_objectSpread({}, props.sx), sxProps)\n  }));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}