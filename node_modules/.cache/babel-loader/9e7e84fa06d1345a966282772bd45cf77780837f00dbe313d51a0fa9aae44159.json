{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { DEFAULT_THEME, LEFT_EDGE_SIDEBAR_ID, RIGHT_EDGE_SIDEBAR_ID } from \"../utils/constant\";\nimport { pickNearestBreakpoint } from \"../utils/pickNearestBreakpoint\";\nimport { combineBreakpoints } from \"../utils/combineBreakpoints\";\nimport { createWidthInterface } from \"../Width/WidthModel\";\nimport { toValidCssValue } from \"../utils/toValidCssValue\";\nimport { ResponsiveBuilder } from \"../shared/ResponsiveBuilder\";\nexport class HeaderBuilder extends ResponsiveBuilder {\n  constructor(params) {\n    super(params);\n    _defineProperty(this, \"effectedBy\", {});\n  }\n  isClipped(clippableId, breakpoint) {\n    var headerBreakpointConfig = pickNearestBreakpoint(this.config, breakpoint);\n    if (typeof (headerBreakpointConfig === null || headerBreakpointConfig === void 0 ? void 0 : headerBreakpointConfig.clipped) === \"boolean\" && headerBreakpointConfig.clipped) {\n      return true;\n    }\n    return typeof (headerBreakpointConfig === null || headerBreakpointConfig === void 0 ? void 0 : headerBreakpointConfig.clipped) === \"object\" && (headerBreakpointConfig === null || headerBreakpointConfig === void 0 ? void 0 : headerBreakpointConfig.clipped[clippableId]);\n  }\n  isAboveSomeEdgeSidebar(breakpoint) {\n    var headerBreakpointConfig = pickNearestBreakpoint(this.config, breakpoint);\n    if (!headerBreakpointConfig) return false;\n    var {\n      clipped\n    } = headerBreakpointConfig;\n    if (typeof clipped === \"boolean\") {\n      return clipped;\n    }\n    return !!(clipped !== null && clipped !== void 0 && clipped.leftEdgeSidebar) || !!(clipped !== null && clipped !== void 0 && clipped.rightEdgeSidebar);\n  }\n  getOffsetHeight() {\n    return this.generateSxWithHidden({\n      // https://github.com/mui-org/material-ui/blob/next/packages/material-ui-system/src/sizing.js#L5\n      hiddenValue: \"0px\",\n      // don't use 0 as number because it will become 0%\n      assignValue: breakpointConfig => breakpointConfig.position === \"fixed\" ? breakpointConfig.height : \"0px\"\n    });\n  }\n  getSxHeight() {\n    var result = this.generateSxWithHidden({\n      assignValue: breakpointConfig => breakpointConfig.height,\n      // https://github.com/mui-org/material-ui/blob/next/packages/material-ui-system/src/sizing.js#L5\n      hiddenValue: \"0px\" // don't use 0 as number because it will become 0%\n    });\n\n    return _objectSpread({}, Object.keys(result).length && {\n      height: result\n    });\n  }\n  getSxMarginHorizontal() {\n    var marginLeft = {};\n    var {\n      leftEdgeSidebar,\n      rightEdgeSidebar\n    } = this.effectedBy;\n    if (leftEdgeSidebar) {\n      var occupiedSpace = leftEdgeSidebar === null || leftEdgeSidebar === void 0 ? void 0 : leftEdgeSidebar.getOccupiedSpace();\n      var breakpoints = this.mergeBreakpoints(occupiedSpace);\n      for (var bp of breakpoints) {\n        marginLeft[bp] = this.isClipped(LEFT_EDGE_SIDEBAR_ID, bp) ? \"0px\" : toValidCssValue(pickNearestBreakpoint(occupiedSpace, bp));\n      }\n    }\n    var marginRight = {};\n    if (rightEdgeSidebar) {\n      var _occupiedSpace = rightEdgeSidebar === null || rightEdgeSidebar === void 0 ? void 0 : rightEdgeSidebar.getOccupiedSpace();\n      var _breakpoints = this.mergeBreakpoints(_occupiedSpace);\n      for (var _bp of _breakpoints) {\n        marginRight[_bp] = this.isClipped(RIGHT_EDGE_SIDEBAR_ID, _bp) ? \"0px\" : toValidCssValue(pickNearestBreakpoint(_occupiedSpace, _bp));\n      }\n    }\n    return _objectSpread(_objectSpread({}, Object.keys(marginLeft).length && {\n      marginLeft\n    }), Object.keys(marginRight).length && {\n      marginRight\n    });\n  }\n  getSxWidth() {\n    var _leftEdgeSidebar$getO, _rightEdgeSidebar$get;\n    var result = {};\n    var {\n      leftEdgeSidebar,\n      rightEdgeSidebar\n    } = this.effectedBy;\n    var leftOccupiedSpace = (_leftEdgeSidebar$getO = leftEdgeSidebar === null || leftEdgeSidebar === void 0 ? void 0 : leftEdgeSidebar.getOccupiedSpace()) !== null && _leftEdgeSidebar$getO !== void 0 ? _leftEdgeSidebar$getO : {};\n    var rightOccupiedSpace = (_rightEdgeSidebar$get = rightEdgeSidebar === null || rightEdgeSidebar === void 0 ? void 0 : rightEdgeSidebar.getOccupiedSpace()) !== null && _rightEdgeSidebar$get !== void 0 ? _rightEdgeSidebar$get : {};\n    var breakpoints = this.mergeBreakpoints(combineBreakpoints(leftOccupiedSpace, rightOccupiedSpace));\n    for (var key of breakpoints) {\n      var bp = key;\n      var effectLeft = createWidthInterface(0);\n      if (leftEdgeSidebar) {\n        if (!this.isClipped(LEFT_EDGE_SIDEBAR_ID, bp)) {\n          effectLeft = createWidthInterface(leftEdgeSidebar.isFlexiblePersistent(bp, \"header\") ? 0 : pickNearestBreakpoint(leftOccupiedSpace, bp));\n        }\n      }\n      var effectRight = createWidthInterface(0);\n      if (rightEdgeSidebar) {\n        if (!this.isClipped(RIGHT_EDGE_SIDEBAR_ID, bp)) {\n          effectRight = createWidthInterface(rightEdgeSidebar.isFlexiblePersistent(bp, \"header\") ? 0 : pickNearestBreakpoint(rightOccupiedSpace, bp));\n        }\n      }\n      result[bp] = effectLeft.combine(effectRight).getStyle().width;\n    }\n    return _objectSpread({}, Object.keys(result).length && {\n      width: result\n    });\n  }\n  getSxZIndex() {\n    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_THEME;\n    var result = this.generateSx((config, bp) => {\n      var _config$layer;\n      return this.isAboveSomeEdgeSidebar(bp) ? theme.zIndex.drawer + 10 + ((_config$layer = config.layer) !== null && _config$layer !== void 0 ? _config$layer : 0) : theme.zIndex.appBar;\n    }, theme.zIndex.appBar);\n    return _objectSpread({}, Object.keys(result).length && {\n      zIndex: result\n    });\n  }\n  getSxProps() {\n    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_THEME;\n    var sxTop = this.generateSx(config => config.top, 0);\n    var sxDisplay = this.getSxDisplay(\"flex\");\n    var displayKeys = Object.keys(sxDisplay);\n    var shouldAttachDisplay = displayKeys.length > 1 || displayKeys.length === 1 && displayKeys[0] !== \"xs\";\n    return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      position: this.generateSx(config => config.position)\n    }, Object.keys(sxTop).length && {\n      top: sxTop\n    }), shouldAttachDisplay && {\n      display: sxDisplay\n    }), this.getSxHeight()), this.getSxWidth()), this.getSxMarginHorizontal()), this.getSxZIndex(theme));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}