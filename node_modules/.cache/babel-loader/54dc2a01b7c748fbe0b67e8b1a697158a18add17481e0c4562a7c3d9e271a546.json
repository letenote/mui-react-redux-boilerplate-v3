{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from \"react\";\nimport cx from \"clsx\";\nimport { styled } from \"@mui/material/styles\";\nimport { useLayoutCtx } from \"../Root/Root\";\nimport { InsetOffset } from \"./InsetOffset\";\nvar InsetSidebarRoot = styled(\"div\", {\n  name: \"AppInsetSidebar\",\n  slot: \"Root\",\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  position: \"relative\",\n  flexShrink: 0\n});\nvar InsetSidebarBody = styled(\"div\", {\n  name: \"AppInsetSidebar\",\n  slot: \"Body\",\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.body;\n  }\n})(function (_ref) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  return _objectSpread(_objectSpread(_objectSpread({\n    display: \"flex\",\n    flexDirection: \"column\",\n    overflow: \"auto\"\n  }, ownerState.anchor === \"left\" && {\n    borderRight: \"1px solid\"\n  }), ownerState.anchor === \"right\" && {\n    borderLeft: \"1px solid\"\n  }), {}, {\n    borderColor: theme.palette.divider\n  });\n});\nexport var InsetSidebar = function InsetSidebar(_ref2) {\n  var anchor = _ref2.anchor,\n    children = _ref2.children,\n    classes = _ref2.classes,\n    RootProps = _ref2.RootProps,\n    rootSx = _ref2.rootSx,\n    props = _objectWithoutProperties(_ref2, [\"anchor\", \"children\", \"classes\", \"RootProps\", \"rootSx\"]);\n  var ctx = useLayoutCtx();\n  var builder = ctx.builder; // anchor should be injected via InsetContainer\n\n  var sidebar = builder[\"\".concat(anchor, \"InsetSidebar\")];\n  return /*#__PURE__*/React.createElement(InsetSidebarRoot, _extends({}, RootProps, {\n    className: cx(RootProps === null || RootProps === void 0 ? void 0 : RootProps.className, classes === null || classes === void 0 ? void 0 : classes.root),\n    sx: _objectSpread(_objectSpread({}, sidebar === null || sidebar === void 0 ? void 0 : sidebar.getSxRoot()), rootSx)\n  }), /*#__PURE__*/React.createElement(InsetSidebarBody, _extends({}, props, {\n    className: cx(props === null || props === void 0 ? void 0 : props.className, classes === null || classes === void 0 ? void 0 : classes.paper),\n    ownerState: {\n      anchor: anchor\n    },\n    sx: _objectSpread(_objectSpread({}, sidebar === null || sidebar === void 0 ? void 0 : sidebar.getSxBody()), props === null || props === void 0 ? void 0 : props.sx)\n  }), /*#__PURE__*/React.createElement(InsetOffset, {\n    sidebar: sidebar\n  }), typeof children === \"function\" ? children(ctx) : children));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}